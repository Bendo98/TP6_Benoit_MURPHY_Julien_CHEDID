{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15480\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\'97\'97\'97\'97\'97\'97\'97\'97 Exercise 1 \'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
1.	What is clean code? What is the role played by refactoring one\'92s code?\
\
Clean code is a code that every coder and programmers and reader of the code can understand easily and and gets to the point. So we don\'92t have like duplication variable or too many classes for example and it still works. \
The main purpose of refactoring a code is to make it cleaner with more relevant line of code to make it more efficient without changing the global process of it.\
\
2.	Do you think you can \'93over-refactor\'94 and do too much? How?\
\
Yes I think  you can "over-refactor" and do too much by spending too much time refactoring when you don\'92t need too and sometimes get some errors on the code which will not compile properly or sometimes even lose the main elements code that you need for your project. \
\
3.	What is a code smell? Why should you bother?\
\
A code smell is like an instinct, an indicator that your are not programming properly. You should bother because it shows some crucial defaults in your code.\
\
4.	Can you identify a few code smells in the original GuildedRose?\
\
We can identify the method updateQuality() as we can see there is too many unnecessary if statement which is difficult to deconstruct and surely way too long to compile. \
\
5.	 What are some refactoring techniques you could have used in the GuildedRose?\
\
For example we could have used the decompose conditional technique in order to decompose the if statement part. Or we can use the extract method to divide the code in other method that we will call in the principal one  in order to make it more clear for the reader. Finally we can use the extract variable, to put the result of the if statement in separate variables. \
\
\
\'97\'97\'97\'97\'97\'97\'97\'97 Exercise 2 \'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\
1. In simple terms, and a few sentences at most, what\'92s a design pattern?\
\
it\'92s a general solution like a template that will solve a specific programming problem. \
It is relevant to use some when you face a code that looks like a problem that could be solve with some pattern. But if you can make a clean code without those template and with fewer line of code, you don\'92t need to use it.\
\
2.	Write  a  small  program  that  build  a pizza  with  various  toppings  using  the builder pattern. Why is this a good idea? Think about scalability for instance\
\
Builder pattern is useful when you want to build a lot of objects, in this case pizzas, which can have common bases like dough, size, or sauce, but you want to add a lot of different toppings like vegetables or meat. It avoids creating a billion different constructors with lots of parameters.\
\
3.	Find an original idea to implement a decorator pattern (not the one from the website). Can you think of any limitations? No need to code here.\
\
To implement a decorator pattern we can create interfaces to implement the class into these interfaces. \
\
4.	Write  a  small  program  to  implement  the behavioral design  pattern  of  your  choice\
\
With Julien we decided to choose the Command pattern as behavioral design that we have applied on the pizza program.}